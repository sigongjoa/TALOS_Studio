
import argparse
import os
import shutil
import subprocess
import glob

def main():
    parser = argparse.ArgumentParser(description="Run DSINE Surface Normal Estimation on a single image.")
    parser.add_argument("--input_image", required=True, help="Path to the input image.")
    parser.add_argument("--output_dir", required=True, help="Directory to save the final output.")
    args = parser.parse_args()

    base_dir = os.path.dirname(os.path.abspath(__file__))
    dsine_dir = os.path.join(base_dir, "libs", "DSINE")
    dsine_projects_dir = os.path.join(dsine_dir, "projects", "dsine")
    
    sample_img_dir = os.path.join(dsine_projects_dir, "samples", "img")
    sample_output_dir = os.path.join(dsine_projects_dir, "samples", "output")
    
    # --- 1. Prepare directories ---
    os.makedirs(sample_img_dir, exist_ok=True)
    os.makedirs(sample_output_dir, exist_ok=True)
    os.makedirs(args.output_dir, exist_ok=True)

    # Clean up previous sample files
    for f in glob.glob(os.path.join(sample_img_dir, "*")):
        os.remove(f)
    for f in glob.glob(os.path.join(sample_output_dir, "*")):
        os.remove(f)

    # --- 2. Copy input image to DSINE sample directory ---
    input_filename = os.path.basename(args.input_image)
    destination_path = os.path.join(sample_img_dir, input_filename)
    shutil.copy(args.input_image, destination_path)
    print(f"Copied {args.input_image} to {destination_path}")

    # --- 3. Run the DSINE model ---
    print("Running DSINE model...")
    config_file = "./experiments/exp001_cvpr2024/dsine.txt"
    
    # We must run the command from within the projects/dsine directory
    # Use conda run to ensure the correct environment is used.
    command = [
        "conda", "run", "-n", "DSINE",
        "python", "test_minimal.py", config_file
    ]
    
    try:
        subprocess.run(command, check=True, cwd=dsine_projects_dir, capture_output=True, text=True)
        print("DSINE model executed successfully.")
    except subprocess.CalledProcessError as e:
        print("--- ERROR: DSINE execution failed ---")
        print("STDOUT:", e.stdout)
        print("STDERR:", e.stderr)
        return

    # --- 4. Move output to the final destination ---
    # The output file name is based on the input file name, e.g., `image_01.png` -> `image_01_normal.png`
    input_name_without_ext = os.path.splitext(input_filename)[0]
    
    # Find the output file (it could have a suffix like _normal)
    # Let's find the first .png file in the output directory
    output_files = glob.glob(os.path.join(sample_output_dir, "*.png"))
    if not output_files:
        print("--- ERROR: No output file was generated by DSINE. ---")
        print(f"Looked in: {sample_output_dir}")
        return
        
    generated_output_file = output_files[0]
    
    final_output_name = f"{input_name_without_ext}_normal.png"
    final_output_path = os.path.join(args.output_dir, final_output_name)
    
    shutil.move(generated_output_file, final_output_path)
    print(f"Output saved to {final_output_path}")

if __name__ == "__main__":
    main()

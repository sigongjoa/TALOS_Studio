import os
import json
import pytest
from src.narration_agent.narration_agent import NarrationAgent

class MockLLMClient:
    def generate(self, prompt: str):
        class MockResponse:
            def __init__(self, text):
                self.text = text
        # Simple mock response for testing
        if "f(x) = x^2" in prompt:
            return MockResponse("This is a simple quadratic function, often seen in projectile motion. It describes a parabolic path, much like a hero's journey!")
        return MockResponse("This is a placeholder narration from the mock LLM.")

class MockTTSClient:
    def convert_text_to_speech(self, text: str, output_path: str):
        # Simulate creating a dummy audio file
        with open(output_path, "w") as f:
            f.write(f"dummy audio for: {text}")
        return output_path

@pytest.fixture
def narration_agent():
    return NarrationAgent(llm_client=MockLLMClient(), tts_client=MockTTSClient())

@pytest.fixture
def placeholder_narration_agent():
    return NarrationAgent() # No LLM or TTS client

def test_generate_script_with_llm(narration_agent):
    formula = "f(x) = x^2"
    parameters = {"amplitude": 1, "offset": 0}
    script = narration_agent.generate_script(formula, parameters)
    assert "quadratic function" in script
    assert "parabolic path" in script

def test_generate_script_placeholder(placeholder_narration_agent, capsys):
    formula = "E=mc^2"
    parameters = {"mass": 1, "speed_of_light": 299792458}
    script = placeholder_narration_agent.generate_script(formula, parameters)
    assert "Warning: LLM client not provided." in capsys.readouterr().out
    assert "E=mc^2" in script
    assert "우주의 신비를 풀어낼 열쇠" in script

def test_generate_audio(narration_agent, tmp_path):
    script = "Test narration script."
    output_path = tmp_path / "test_audio.mp3"
    generated_path = narration_agent.generate_audio(script, str(output_path))
    assert os.path.exists(generated_path)
    with open(generated_path, "r") as f:
        content = f.read()
        assert f"dummy audio for: {script}" in content

def test_generate_audio_no_tts_client(placeholder_narration_agent, tmp_path, capsys):
    script = "Test narration script."
    output_path = tmp_path / "test_audio.mp3"
    generated_path = placeholder_narration_agent.generate_audio(script, str(output_path))
    assert "Warning: TTS client not provided." in capsys.readouterr().out
    assert generated_path == ""
    assert not os.path.exists(output_path)

def test_generate_subtitles(narration_agent, tmp_path):
    script = "This is the first sentence. This is the second sentence. And the third one."
    output_path = tmp_path / "test_subtitles.srt"
    # Calculate expected duration based on the logic in narration_agent.py
    num_sentences = len([s.strip() for s in script.split('.') if s.strip()])
    audio_duration = num_sentences * 2.0
    generated_path = narration_agent.generate_subtitles(script, audio_duration=audio_duration, output_path=str(output_path))
    assert os.path.exists(generated_path)
    with open(generated_path, "r", encoding="utf-8") as f:
        content = f.read()
        # Expected content based on 2 seconds per sentence
        assert "1\n00:00:00,000 --> 00:00:02,000\nThis is the first sentence" in content
        assert "2\n00:00:02,000 --> 00:00:04,000\nThis is the second sentence" in content
        assert "3\n00:00:04,000 --> 00:00:06,000\nAnd the third one" in content

def test_process_narration(narration_agent, tmp_path):
    formula = "y = mx + b"
    parameters = {"slope": 2, "intercept": 1}
    output_dir = tmp_path / "narration_output"
    audio_path, subtitle_path = narration_agent.process_narration(formula, parameters, str(output_dir))

    assert os.path.exists(audio_path)
    assert os.path.exists(subtitle_path)
    assert "narration.mp3" in audio_path
    assert "subtitles.srt" in subtitle_path

    with open(audio_path, "r") as f:
        # The script generated by the mock LLM is 'This is a placeholder narration from the mock LLM.'
        assert "dummy audio for: This is a placeholder narration from the mock LLM." in f.read()
    with open(subtitle_path, "r", encoding="utf-8") as f:
        content = f.read()
        expected_script = "This is a placeholder narration from the mock LLM"
        num_sentences = len([s.strip() for s in expected_script.split('.') if s.strip()])
        expected_duration_per_sentence = 2.0
        expected_end_time = expected_duration_per_sentence * num_sentences
        expected_subtitle_content = (
            f"1\n00:00:00,000 --> {narration_agent._format_time(expected_end_time)}\n"
            f"{expected_script}\n\n"
        )
        assert content == expected_subtitle_content
